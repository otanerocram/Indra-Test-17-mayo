"use strict";

// tests for listAll
// Generated by serverless-jest-plugin
const createmodule = require("./../src/functions/starships/create/handler");

const jestPlugin = require("serverless-jest-plugin");
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(createmodule, { handler: "main" });

describe("Testing... /api/starship/create", () => {
  beforeAll((done) => {
    // lambdaWrapper.init(); // Run the deployed lambda
    done();
  });

  const badPayload = {
    name: "BAD STARSHIP",
  };

  const goodPayload = {
    nombre: "NAVE DE PRUEBA 2",
  };

  const _falseEvent = (good) => {
    return {
      body: JSON.stringify(good ? goodPayload : badPayload),
    };
  };

  const _context = {
    awsRequestId: "99999-b",
  };

  test("Si no paso un payload, debe responder 400", () => {
    return wrapped.run().then((response) => {
      const { statusCode } = response;
      expect(statusCode).toBe(400);
    });
  });

  test("Si creo un registro con el parametro name debe retornar un error y un status code 400", () => {
    return wrapped.run(_falseEvent(false), _context).then((response) => {
      const { statusCode } = response;
      const { error } = JSON.parse(response.body);
      expect(statusCode).toBe(400);
      expect(error).toBe("Payload missmatch");
    });
  });

  test("Si creo un registro con el parametro nombre debe retornar el codigo 200 y devolver el id del registro", () => {
    return wrapped.run(_falseEvent(true), _context).then((response) => {
      const { statusCode } = response;
      const { id, message } = JSON.parse(response.body);
      expect(statusCode).toBe(200);
      expect(typeof id).toBe("string");
      expect(message).toBe("stored!");
    });
  });
});
